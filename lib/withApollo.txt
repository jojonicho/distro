import { createWithApollo } from './createWithApollo'
import { ApolloClient, InMemoryCache } from '@apollo/client'
import { PaginatedMessages } from '../generated/graphql'
import { NextPageContext } from 'next'

const production = process.env.NODE_ENV === 'production'
const URL = production
  ? 'https://distrobackend.herokuapp.com'
  : 'http://localhost:4000'
const WEBSOCKET_URL = production
  ? 'wss://distrobackend.herokuapp.com'
  : 'ws://localhost:4000'

const createClient = (ctx: NextPageContext) =>
  new ApolloClient({
    uri: URL,
    credentials: 'include',
    headers: {
      cookie:
        (typeof window === 'undefined' ? ctx.req?.headers.cookie : undefined) ||
        '',
    },
    cache: new InMemoryCache({
      typePolicies: {
        Query: {
          fields: {
            posts: {
              keyArgs: [],
              merge(
                existing: PaginatedMessages | undefined,
                incoming: PaginatedMessages
              ): PaginatedMessages {
                return {
                  ...incoming,
                  messages: [
                    ...(existing?.messages || []),
                    ...incoming.messages,
                  ],
                }
              },
            },
          },
        },
      },
    }),
  })

export const withApollo = createWithApollo(createClient)
